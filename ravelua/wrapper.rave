namespace lua {
    alias multRet = -1;
    alias regIndex = -10000;
    alias envIndex = -10001;
    alias globalIndex = -10002;
    
    extern(linkname: "lua_getfield") void getField(void* ptr, int index, char* k);
    (inline) void getGlobal(void* ptr, char* k) {lua::getField(ptr, lua::globalIndex, k);}
    
    extern(linkname: "luaL_newstate") void* newState();
    extern(linkname: "luaL_openlibs") void openLibs(void* ptr);

    extern(linkname: "luaL_loadfilex") int loadFileX(void* ptr, char* fname, char* mode);
    (inline) int loadFile(void* ptr, char* fname) => lua::loadFileX(ptr, fname, null);

    extern(linkname: "lua_pcallk") int pcallk(void* ptr, int nargs, int nresults, int msgh, void* ctx, void* k);
    (inline) int pcall(void* ptr, int f1, int retType, int f2) => lua::pcallk(ptr, f1, retType, f2, 0, null);

    extern(linkname: "lua_close") void close(void* ptr);
    (inline) int doFile(void* ptr, char* filename) => (lua::loadFile(ptr, filename) || lua::pcall(ptr, 0, lua::multRet, 0));

    extern(linkname: "lua_pushboolean") void pushBool(void* ptr, bool b);
    extern(linkname: "lua_pushinteger") void pushInt(void* ptr, int n);
    extern(linkname: "lua_pushstring") void pushString(void* ptr, char* str);
    extern(linkname: "lua_pushnil") void pushNil(void* ptr);
    extern(linkname: "lua_pushnumber") void pushNumber(void* ptr, double n);
    extern(linkname: "lua_pushlstring") void pushLString(void* ptr, char* str, int length);
    extern(linkname: "lua_pushthread") int pushThread(void* ptr);
    extern(linkname: "lua_pushvalue") void pushValue(void* ptr, int index);

    extern(linkname: "lua_tointeger") int toInteger(void* ptr, int index);
    extern(linkname: "lua_tonumber") double toNumber(void* ptr, int index);
    extern(linkname: "lua_tostring") char* toString(void* ptr, int index);

    extern(linkname: "lua_type") int type(void* ptr, int index);
    extern(linkname: "lua_typename") char* typeName(void* ptr, int tp);
    
    extern(linkname: "lua_remove") void remove(void* ptr, int index);
    extern(linkname: "lua_replace") void replace(void* ptr, int index);
    extern(linkname: "lua_setfield") void setField(void* ptr, int index, char* k);
    (inline) void setGlobal(void* ptr, char* k) {lua_setfield(ptr, lua::globalIndex, k);}
}